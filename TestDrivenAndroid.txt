    *================== TEST DRIVEN ANDROID ==================*


+====================== FUNDAMENTALS OF TDD ======================+

    == WHY QUALITY IS IMP ==
    -> Quality is free
    -> Var devices, os, envs
    -> PlayStore reflection of qual
        -> Bad reviews don't go away (Avoid L-shaped and C-Shaped, go for Inverted L)
        -> Successful apps put qual first

    == SD TRIANGLE ==
    Traditional : {TIME, FEATURE, MONEY} Pick any two
    TDD : {CAPITAL (TIME/MONEY), FEATURES, QUALITY} Pick any one along with Quality
        Works well with scrum
        Minimises Tech Debt

    == WHEN TESTING HAPPENS ==
    WATERFALL
        Analysis -> Design -> Implementation -> Test -> Rollout

    TDD
        Analysis -> Design -> Test -> Implementation -> Rollout

    == WHY TEST FIRST ==
        Qual too imp to save till the end
        Define what qual code is before writing any
            Stay Focused
            Know when complete

+====================== TESTING TRIANGLE ======================+

            = INSTRUMENTED =
          ==== INTEGRATION ====
       ========== UNIT ==========


+====================== BDD ======================+

    == WHY BDD ==
        Common lang along all disciplines : Business Analyst, Testers, Developers
        A way to communicate

    == History ==
        Comes from TDD
        Domain Specific Language (DSL)
        Convert english language sentences to executable tests

    == BDD Focus ==
        Where
        What to test
        How
        Name
        Failure

    == Principles ==
    Unit test names are full sentences
    As a [user] I want feature so that [benefit]
    Acceptance criteria in Given -> When -> Then syntax

    == Example ==
    As a user I want to search for plants so that I can see plants that meet my criteria
    Given : Plant Service Initialised
    When : Search for Red
    Then : Results contain RedBud

    == Principles of BDD ==
    Define Unit Test
    Make Test fail
    Implement feature
    Verify that the implementation makes the test succeed


+====================== PROJ STRUCT ======================+

test : Runs on Local JVM (More concerned with POJOs). Used for Unit Tests.
androidTest : Runs on Android Environment. Used for Integration and Instrumentation Tests.

+====================== BEST PRACTICES - DTOS, Interfaces, Layers ======================+

Class : Noun
Variables : Adjectives
Methods : Verbs

Create an object from a class
    -> Each class should do one thing, and do it well
    -> Avoid very long classes (Long classes hard to test and reuse)
    -> Avoid classes that blur layer

Interfaces : Contracts what a class will do
    -> Collection of method signatures
    -> Can be implemented by multiple classes
    -> Can be used as a var type, eg VariableType variableName = new ObjectType();

Data Transfer Object
    -> Noun class
    -> POJO
    -> Can easily transfer data across layers, without dependencies on those layers

Traditional Layers
    -> {OUTSIDE APP} Persistence Layer
    -> Data Access (DAO)
    -> Business Logic
    -> UI
    -> DTO

    +==============+  +==============+  +==============+  +==============+
    | SEARCH PLANT |  |              |  | SPECIMEN DAO |  |              |
    |   ACTIVITY   |  |              |  +==============+  |              |
    +==============+  |              |                    |              |
                      |              |  +==============+  |              |
    +==============+  |              |  |  PLANT DAO   |  |              |
    |  ADD PLANTS  |  | PLANTSERVICE |  +==============+  |  PERSISTENCE |
    |   ACTIVITY   |  |              |                    |              |
    +==============+  |              |  +==============+  |              |
                      |              |  |   USER DAO   |  |              |
                      |              |  +==============+  |              |
                      +==============+                    +==============+

    +====================================================================+
    |                           PLANT DTO                                |
    +====================================================================+

+====================== WHY INTERFACES ======================+

INTERFACE
    -> Contract for a class
    -> Contains method signatures
    -> Can be implemented by multiple classes
        eg, VarType varName = new ObjType();
    -> Separates Vars and Obj Types
    -> Polymorphism
        Var types tell what a methods you are able to call, obj type tells you
        what will happen when you call that method

WHY USE INTERFACES
    -> Flexible, future proof design
    -> WebService to JsonService example, where if calls were made using interface, we can easily switch to diff objs
        so long as both those objects implement the same interfaces

    -> Parallel work across layers using stubs

    -> Business Analyst : What a prog should do
    -> Devs : Write Tests
    -> QA, Devs, Autos : Run the tests

DTOs AND INTERFACES
    -> A DTO is often the return type of a fetch method and a parameter of an insert/update/delete methods
    -> If using Strings too often, are you using OOD properly?


+====================== MINIMISING IF TESTS ======================+

WHAT IS AN IF TEST:
    -> If test : A decision structure
    -> Can be written in one class
    -> Or, can simulate the same thing by using subclasses

COMPLICATED IF TEST NOTORIOUSLY HARD TO COVER WITH TESTS
    -> A sign that logic is in the wrong class
    -> Less future-proof design
    -> If tests make for longer classes
    -> Smaller, concise classes are easier to test

EXAMPLE

                    CAR {move()}
                          |
        ========================================
        |                 |                    |
  GASOLINE {move()}   ELECTRIC {move()}   HYBRID {move()}


    Instead of
    Car{
        move() {
            if (GASOLINE) {
                //gas move
            } else if (ELECTRIC) {
                // electric move
            } else if (HYBRID) {
                // hybrid move
            }
        }
    }

+====================== JUNIT SYNTAX ======================+

JUNIT FEATURES
    -> Fixtures
        --> Prerequisites setup and teardowns for running tests
    -> Test Suites
        --> Aggregate tests together
    -> Test Runners
        --> Runs JUnit Tests
        --> Can aggregate successes and failures for summary

+====================== JUNIT FEATURES ======================+

JUNIT TEST CLASSES
    -> Classes we're writing to verify that the tests pass
    -> Assert : Contains assert method
    -> TestCase : Defines fixtures to run tests
    -> TestResults : Aggregates the results of running the tests

+====================== TESTCASE ======================+

    -> setup()
    -> teardown()
    -> Other methods
        --> run()
        --> get/setName()
        --> createResult()
        --> countTestCases()

+====================== @Test ======================+

@Test
    -> Indicates that this method should be evaluated by JUnit
    -> Very frequently used
    -> Replaces testXxx() syntax of JUnit3
    -> @Test(timeout = ms): Time to wait, in milliseconds before declaring the test failed
    -> @Test(expected = ClassCastException.class) : When throwing an Exception for the test, successful result is
    expected

+====================== @Ignore ======================+

@Ignore
    -> Ignore this class for testing
    -> Use temporarily
    -> If a class is failing an entire unit test suite for a known reason, and you need a build to run

+====================== @Before ======================+

@Before
    -> Runs this before each test method
    -> Good for initialisations required for each test

@BeforeClass
    -> Run once before any method in test class runs (only runs one time)

+====================== @After ======================+

@After
    -> Run this after each test method
    -> Good for de-initialisation after each test
    -> Release any resources or memory usage

@AfterClass
    -> Run once, after all tests have finished

+====================== @RunWith and @Suite ======================+

@RunWith(Suite.class)
    -> Indicate that we want to run a suite of classes

@RunWith(Parameterized.class)
    -> Data-driven parameterized class

@RunWith(MockitoJUnitRunner.class):
    -> Initialise annotation-based @Mock Objects

@Suite.SuiteClasses({}):
    -> A comma-separated list of test classes to run

+====================== Design for Test ======================+

How designing for test makes for better overall design
    -> Componentize Classes
    -> Class Diagram

Easier to see large number of small classes than small number of large classes

See DesignForTestUML for reference

NetworkDAO might have a URL or URI (Univeral Resource Link/Indicator)

+====================== History of BDD ======================+

-> Emerged from TDD
    -> Advantages of TDD and OOD with a ubiquitous lang
        -> BA, QA, Developers communicate and understand each other
        -> From specification to example
        -> Autonomous teams break down organizational boundaries
-> Attributed to Dan North

+====================== Core Principles of BDD ======================+

ItsAllBehavior : Business and Technology should refer to the same system in the same way.
WheresTheBusinessValue : Any system should have an identified, verifiable value to business.
EnoughIsEnough : Up-front analysis, design, and planning all have diminishing returns.

Fits well with Scrum even though not a part of it

+====================== BDD Focus : 5Ws ======================+

Where to start
What to test
How much to test
What to name the test
Why a test fails

+====================== BDD's Relation to Specifications ======================+

BD is an integral part of technical documentation
    -> Business Analyst (BA) writes behaviors
        -> EG : As a [user] I want to [action] so  that [outcome]
Developers ask questions
These become examples
    -> Given [context/assumption], When [action], Then [expected result]
    -> Use words that have meaning to everyone
    -> Prefer the term "example" over "test"
    -> Unit test methods as sentences, usually beginning with verbs (Verbose method names)
Everyone has a vested interest in quality

+====================== Example of Design Doc (GIVEN,WHEN,THEN) ======================+
        === REQIUREMENT 100.0 : SEARCH FOR PLANTS ===
SCENARIO
    As a user interested in plants, I want to be able to search plants based on any part of the name : genus, species, cultivar or
    common name.

DEPENDENCIES
    Plant search data are available and accessible

ASSUMPTIONS
    Scientific names are stated in Latin
    Common names are stated in English

EXAMPLES
    1.1
        GIVEN a feed of plant data is available
        WHEN I search for "RedBud"
        THEN I should recieve at least one result with these attributes
            Genus : Cercis
            Species : Canadensis
            Common Name : Eastern Redbud
    1.2
        GIVEN a feed of plant data is available
        WHEN I search for "Hybrid Oak"
        THEN I should recieve at least one result with these attributes
            Genus : Quercus
            Species : ×benderi
            Common Name : Hybrid Oak
        AND I should recieve at least one result with these attributes
            Genus : Quercus
            Species : ×benderi
            Common Name : Hybrid Oak
    1.3
        GIVEN a feed of plant data is available
        WHEN I search for "asdhagljkdfhbjgnn"
        THEN I should recieve zero results

    /*
    Common givens among examples are good so we can create common subassemblies for mutliple
    tests.
    */

SIGNOFF

REVISION HISTORY

+====================== Asserts ======================+

assertEquals
    -> Verifies that two items are equal
    -> Overloaded for many primitive types (int, long, float, double), plus String
    -> Doubles and floats overloads include a Delta variable for acceptable diff to assist in floating point arithmetic

assertNotEquals
    similar to assertEquals but test true if the results are not equal

assertNull, assertNotNull
    -> Null reference : Is there an object assigned to this variable
       -> PlantDTO plant = null; // null ref
       -> PlantDTO plant = new PlantDTO(); // not a null ref
    -> assertNull
        Verifies that given object is null
            -> Caution! : try not to get in a habit of returning null from a method especially if it is the result of catching an
            exception.
    -> assertNotNull
        Verifies object is not null

assertSame
    Verify that two objects are the same object in memory (occupy same space in memory), not just have equal values

assertTrue, assertFalse
    Verify whether a boolean is true or false

assertThat
    -> New in JUnit 4.0
    -> Allows for hamcrest library comparisions
    -> assertThat(redbudPlant, is(equalTo(resultPlant)))

Fail
    -> Forces a test to fail
    -> Does not verify anything
    -> Useful if you have reached a point in code that should not be reached
    -> Can use this in a catch block
    -> Can just let the exception throw back, as they will cause the test to fail automatically
    -> Can add a string to it, describing why it failed

+====================== History of Asserts ======================+

Version 1 : assert(item1.equals(item2))
    -> Somewhat inflexible and difficult to read
Version 2 : assertEquals(item1, item2)
    -> How do we handle capitalization, whitespaces, partial string matches, etc
    -> This is where Hamcrest plays well
Version 3 : assertThat(actualValue, is(equalTo(expectedValue)))
    -> Flexible with matchers
    -> Easy to modify with more or less restrictive conditions
    -> Naturally readable

+====================== Hamcrest ======================+

-> Based on matchers
    -> Matchers can handle complex assertions
    -> Example : Regex
    -> Many built in matchers
-> Create matching rules declaratively
-> Complex assertions written in declarative (versus procedural) style
-> Works well with collections
-> Better error messages (shows expected and equals)
-> Integrated with JUnit4

+====================== Some Built-In Hamcrest Matchers ======================+
-> Core Matchers
    -> is, not
    -> allOf
    -> anyOf
    -> equalTo
    -> nullValue, notNullValue
    -> containsString, endsWith, startsWith
-> Additional matchers for collections
    -> IsCollectionWithSize
    -> IsCollectionContaining
    -> IsEmptyCollection
-> Several more matchers for beans, comparisons, and so on


+====================== What is Mockito ======================+

-> Mock out dependencies
    -> Remove side effects from external elements
    -> Example: test our PlantDAO without requiring network access and the NetworkDAO
    -> Similar to the stub class that we created
    -> Simplifies writing our test
-> Can mock Android framework classes. Otherwise, unit tests will throw an exception
-> For a data provider class (DAO), create predictable set of data against which to write tests
-> Not a part of JUnit4, but works well with it
-> Other considerations:
    -> Cannot mock anonymous, primitive and final types
        -> But TDD drives good design
        -> Are anonymous inner classes good design?

+====================== What is Mockito ======================+

-> A stand-in for an actual object
-> Define the type of object to mock
    -> Example : NetworkDAO networkDAO = mock(NetworkDAO.class);
        -> No constructor called
        -> How does it know the return type (type tells what to return)
        -> Generic magic
    -> Can use @Mock annotation instead
        -> If using @Mock, you must have @Rule public MockitoRule rule = MockitoJUnit.rule(); to instantiate @Mock objects
-> The concept is similar to the PlantDAOStub we created earlier

+====================== Mocking methods on an Object ======================+

-> Syntax
    -> when(mockedObject.method(parameters)).thenReturn(value);
-> Eg :
    -> when(networkDAO.fetch("Redbud").thenReturn("JSON");
    -> when(networkDAO.fetch(any(String.class)).thenReturn("JSON");
-> Variants
    -> Several any() variants, including anyInt()
    -> Can throw an exception instead of return : thenThrow(new IOException());

+====================== Mocking methods on an Object ======================+

-> Use Mockito to create validations of unit tests
    -> Mockito keeps a count of each method called, and with which parameters
    -> verify(object, number of times invoked).method(parameters);
    -> Eg :
        -> verify(plantDAO, times(1)).fetchPlants("Redbud");
        -> verify(plantDAO, atLeast(3)).fetchPlants(any(String.class));
        -> verify(networkDAO, atLeastOnce()).fetch("www.wikipedia.org");
        -> Variants: atMost(int), atLeastOnce(), atLeast(int), never(), and so on
    -> Behavior testing: Verify call to the method and its parameters, not what the method does

+====================== Mock Alternative - Spy ======================+

-> @Spy/Spy(): Uses real methods, but can still stub and verify methods
    -> Use the real object, unless you mock it
    -> Mocked methods syntax differs slightly, to avoid invoking the actual method and getting an exception in return
        -> doReturn(value).when(spiedObject).method(arguments);

+====================== @InjectMocks ======================+

-> @InjectMocks: dependency inject for any constructor, method or fields
    -> Attribute/field level annotation
    -> Uses any type annotated with @Spy or @Mock

+====================== Advanced Mocking ======================+

-> Answer
-> ReturnValue
-> MockSettings
-> BDDMockito
-> @RunWith(MockitoJUnitRunner.class)

+====================== Mocking Best Practices ======================+

Mockito Recommends :
    -> Don't mock classes you don't own (Leeway around Android classes)
    -> Don't mock value object/DTO
    -> Don't mock everything

+====================== Technical Debt ======================+

-> Technical Debt: Technical Debt is a concept in programming that reflects the extra development work that arises when code
    that is easy to implement in the short run is used instead of applying the best overall solution
-> When you continue to build on top of bad quality code, you're building on technical debt

+====================== What causes Technical Debt? ======================+

-> Lack of loosely coupled components
    -> TDD is good design. Eg : refactoring NetworkDAO out of PlantDAO
-> Lack of testing
-> Lack of communication/collaboration
-> Parallel/isolated development that needs to be merged
-> Delayed or inadequate refactoring
-> Ignoring/not knowing standards
    -> DTO getters and setters
    -> Strings versus DTOs
-> Timing, last minute changes
-> Inadequate technical leadership or direction
-> Unmanaged scoping

+====================== Technical Debt Consequences ======================+

-> Like interest payments, many side effects of technical debt can grow exponentially,
    if not addressed quickly
    -> More time fixing bugs than working on new features
    -> Quality issues
    -> Bloated Codebase
    -> Miss deadlines
    -> Higher learning curve
    -> Bad PlayStore reviews
-> Technical Debt and the interest on the debt must eventually be paid off. That sum total can grow exponentially

+====================== Brandan's Software Developement Triangle ======================+

Pick any two but one of the two must be quality
       Time
     /      \
    /        \
   /          \
Feature --- Quality

+====================== Why Code Coverage ======================+

-> Shows what percentage of your code is covered by unit test
-> A view of technical debt
    -> Code coverage should always increase, never decrease, or you are increasing technical debt
        -> Add unit test
        -> Remove untested classes

+====================== See Code Coverage ======================+

-> To view code coverage:
    -> Right click on Unit Test, choose "Run [Unit Test] with coverage"
    -> The coverage will appear in the source code package that matches the unit test
-> The location of the cursor during the unit test determines what coverage is considered
    -> To see what a class covers, put the cursor in the class declaration {}
    -> To see what a method covers, put the cursor in the method declaration {}
    -> To see what a line covers, put the cursor on that line

+====================== Why Automatically Run Tests? ======================+

-> So that you don;t forget to write tests.
    -> Some projects being with good intentions of 100% coverage
    -> Forget to run our tests, see the results and update them, they will quickly become old and out of date.
    -> Can be tempted to disregard them.
    -> Remember before automatic compilation, when we had to press a button to see compile errors.
-> See the test failures in our code
    -> Embodies the TDD goal of writing a failing test, then complete the implementation to make the failing test pass

+====================== Setup In Android Studio ======================+

-> Run > Edit Configurations > App > Before Launch, +
    -> Add any unit tests you want to run
    -> An excellent use of @Suite and @RunWith to run multiple tests
        @RunWith(Suite.Class)
        @SuiteClasses({
        BDDPlantDAOTest.class,
        TestNetworkDAO.class,
        })

+====================== What Are Instrumentation Tests ======================+

-> Functional tests
    -> Validate that I can search for a plant, find plants at a location
    -> Automate user interactions with the app on the device

-> Integration Tests
    -> Validate all our layers (UI, Service and DAO) work together properly

+====================== Why Intrumentation Test ======================+

-> Reduce the need for mocked code
    -> Use mockito to mock android framework classes in classic unit tests, but use MockWebserver and
    MockLocationProvider and other such stuff to create hermetic test without mocking Android Framework classes in
    codebase.
-> Test features based on app lifecycle

+====================== Why Intrumentation Test ======================+

What do instrumentation tests have in common?
    -> Test that run on an actual device/emulator
    -> Have access to the details fo the Android app, like Context
    -> Requires framework components, like Parcelable
    -> Send broadcasts to test BroadcastReceivers

+====================== Where Are Intrumentation Test ======================+

-> Located in module-name/src/androidTest/java folder
-> As opposed to general unit tests, which are in module-name/src/test/java

+====================== How Are Intrumentation Test Built ======================+

-> Have their own manifest files
    -> Generated Automatically
    -> Can append your own, and they will be integrated automatically
        -> Ideal if you want different tests for different SDKs
-> Run with InstrumentationTestRunner
    -> Starts Android Process
    -> Invokes onCreate

+====================== Create A New Intrumentation Test ======================+

-> To Create :
    -> Create a new Java Class in androidTest directory
        -> Trick : To create a test for build variant, make a folder named androidTestVariantName and add your test
        there
-> Or navigate to the class you want to test and press ctrl+shift+T

+====================== Inside the Intrumentation Test ======================+

Inside the test
    -> Annotate with @RunWith(AndroidJUnit4.class)
        -> An extension of the JUnit with Android goodness
    -> Create a @Rule annotated ActivityTestRule to get access to an Activity
        -> Eg :
            @Rule
            public ActivityTestRule<SearchPlantsActivity> mActivityRule =
            new ActivityTestRule<>(SearchPlantsActivity.class);

    -> mActivityRule.getActivity() : returns the activity specified in the @Rule annotation
        -> Can access any non-private methods  you'd like, as a part of your tests





